// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64
// +build 386 amd64 amd64p32 arm arm64 mips64le mips64p32le mipsle ppc64le riscv64

package tc

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadClsact returns the embedded CollectionSpec for clsact.
func loadClsact() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_ClsactBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load clsact: %w", err)
	}

	return spec, err
}

// loadClsactObjects loads clsact and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//     *clsactObjects
//     *clsactPrograms
//     *clsactMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadClsactObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadClsact()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// clsactSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type clsactSpecs struct {
	clsactProgramSpecs
	clsactMapSpecs
}

// clsactSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type clsactProgramSpecs struct {
	Classifier1 *ebpf.ProgramSpec `ebpf:"classifier1"`
	Classifier2 *ebpf.ProgramSpec `ebpf:"classifier2"`
}

// clsactMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type clsactMapSpecs struct {
}

// clsactObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadClsactObjects or ebpf.CollectionSpec.LoadAndAssign.
type clsactObjects struct {
	clsactPrograms
	clsactMaps
}

func (o *clsactObjects) Close() error {
	return _ClsactClose(
		&o.clsactPrograms,
		&o.clsactMaps,
	)
}

// clsactMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadClsactObjects or ebpf.CollectionSpec.LoadAndAssign.
type clsactMaps struct {
}

func (m *clsactMaps) Close() error {
	return _ClsactClose()
}

// clsactPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadClsactObjects or ebpf.CollectionSpec.LoadAndAssign.
type clsactPrograms struct {
	Classifier1 *ebpf.Program `ebpf:"classifier1"`
	Classifier2 *ebpf.Program `ebpf:"classifier2"`
}

func (p *clsactPrograms) Close() error {
	return _ClsactClose(
		p.Classifier1,
		p.Classifier2,
	)
}

func _ClsactClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//go:embed clsact_bpfel.o
var _ClsactBytes []byte
