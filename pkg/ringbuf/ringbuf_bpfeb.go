// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64
// +build arm64be armbe mips mips64 mips64p32 ppc64 s390 s390x sparc sparc64

package ringbuf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadRingbuf returns the embedded CollectionSpec for ringbuf.
func loadRingbuf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_RingbufBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load ringbuf: %w", err)
	}

	return spec, err
}

// loadRingbufObjects loads ringbuf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//     *ringbufObjects
//     *ringbufPrograms
//     *ringbufMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadRingbufObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadRingbuf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// ringbufSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ringbufSpecs struct {
	ringbufProgramSpecs
	ringbufMapSpecs
}

// ringbufSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ringbufProgramSpecs struct {
}

// ringbufMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ringbufMapSpecs struct {
	Rb *ebpf.MapSpec `ebpf:"rb"`
}

// ringbufObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadRingbufObjects or ebpf.CollectionSpec.LoadAndAssign.
type ringbufObjects struct {
	ringbufPrograms
	ringbufMaps
}

func (o *ringbufObjects) Close() error {
	return _RingbufClose(
		&o.ringbufPrograms,
		&o.ringbufMaps,
	)
}

// ringbufMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadRingbufObjects or ebpf.CollectionSpec.LoadAndAssign.
type ringbufMaps struct {
	Rb *ebpf.Map `ebpf:"rb"`
}

func (m *ringbufMaps) Close() error {
	return _RingbufClose(
		m.Rb,
	)
}

// ringbufPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadRingbufObjects or ebpf.CollectionSpec.LoadAndAssign.
type ringbufPrograms struct {
}

func (p *ringbufPrograms) Close() error {
	return _RingbufClose()
}

func _RingbufClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//go:embed ringbuf_bpfeb.o
var _RingbufBytes []byte
