// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64
// +build 386 amd64 amd64p32 arm arm64 mips64le mips64p32le mipsle ppc64le riscv64

package xdpcount

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadXdpcount returns the embedded CollectionSpec for xdpcount.
func loadXdpcount() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_XdpcountBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load xdpcount: %w", err)
	}

	return spec, err
}

// loadXdpcountObjects loads xdpcount and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//     *xdpcountObjects
//     *xdpcountPrograms
//     *xdpcountMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadXdpcountObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadXdpcount()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// xdpcountSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdpcountSpecs struct {
	xdpcountProgramSpecs
	xdpcountMapSpecs
}

// xdpcountSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdpcountProgramSpecs struct {
	XdpStats1Func *ebpf.ProgramSpec `ebpf:"xdp_stats1_func"`
}

// xdpcountMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdpcountMapSpecs struct {
	XdpStatsMap *ebpf.MapSpec `ebpf:"xdp_stats_map"`
}

// xdpcountObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadXdpcountObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdpcountObjects struct {
	xdpcountPrograms
	xdpcountMaps
}

func (o *xdpcountObjects) Close() error {
	return _XdpcountClose(
		&o.xdpcountPrograms,
		&o.xdpcountMaps,
	)
}

// xdpcountMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadXdpcountObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdpcountMaps struct {
	XdpStatsMap *ebpf.Map `ebpf:"xdp_stats_map"`
}

func (m *xdpcountMaps) Close() error {
	return _XdpcountClose(
		m.XdpStatsMap,
	)
}

// xdpcountPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadXdpcountObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdpcountPrograms struct {
	XdpStats1Func *ebpf.Program `ebpf:"xdp_stats1_func"`
}

func (p *xdpcountPrograms) Close() error {
	return _XdpcountClose(
		p.XdpStats1Func,
	)
}

func _XdpcountClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//go:embed xdpcount_bpfel.o
var _XdpcountBytes []byte
