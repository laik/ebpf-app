// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64
// +build 386 amd64 amd64p32 arm arm64 mips64le mips64p32le mipsle ppc64le riscv64

package clac

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadClac returns the embedded CollectionSpec for clac.
func loadClac() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_ClacBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load clac: %w", err)
	}

	return spec, err
}

// loadClacObjects loads clac and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//     *clacObjects
//     *clacPrograms
//     *clacMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadClacObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadClac()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// clacSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type clacSpecs struct {
	clacProgramSpecs
	clacMapSpecs
}

// clacSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type clacProgramSpecs struct {
	Prog  *ebpf.ProgramSpec `ebpf:"prog"`
	Prog0 *ebpf.ProgramSpec `ebpf:"prog0"`
}

// clacMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type clacMapSpecs struct {
	ProgMap *ebpf.MapSpec `ebpf:"prog_map"`
}

// clacObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadClacObjects or ebpf.CollectionSpec.LoadAndAssign.
type clacObjects struct {
	clacPrograms
	clacMaps
}

func (o *clacObjects) Close() error {
	return _ClacClose(
		&o.clacPrograms,
		&o.clacMaps,
	)
}

// clacMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadClacObjects or ebpf.CollectionSpec.LoadAndAssign.
type clacMaps struct {
	ProgMap *ebpf.Map `ebpf:"prog_map"`
}

func (m *clacMaps) Close() error {
	return _ClacClose(
		m.ProgMap,
	)
}

// clacPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadClacObjects or ebpf.CollectionSpec.LoadAndAssign.
type clacPrograms struct {
	Prog  *ebpf.Program `ebpf:"prog"`
	Prog0 *ebpf.Program `ebpf:"prog0"`
}

func (p *clacPrograms) Close() error {
	return _ClacClose(
		p.Prog,
		p.Prog0,
	)
}

func _ClacClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//go:embed clac_bpfel.o
var _ClacBytes []byte
