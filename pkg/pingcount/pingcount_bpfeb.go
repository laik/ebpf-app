// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64
// +build arm64be armbe mips mips64 mips64p32 ppc64 s390 s390x sparc sparc64

package pingcount

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadPingcount returns the embedded CollectionSpec for pingcount.
func loadPingcount() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_PingcountBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load pingcount: %w", err)
	}

	return spec, err
}

// loadPingcountObjects loads pingcount and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//     *pingcountObjects
//     *pingcountPrograms
//     *pingcountMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadPingcountObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadPingcount()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// pingcountSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type pingcountSpecs struct {
	pingcountProgramSpecs
	pingcountMapSpecs
}

// pingcountSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type pingcountProgramSpecs struct {
	XdpPingFunc *ebpf.ProgramSpec `ebpf:"xdp_ping_func"`
}

// pingcountMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type pingcountMapSpecs struct {
	CounterMap *ebpf.MapSpec `ebpf:"counter_map"`
	OtherMap   *ebpf.MapSpec `ebpf:"other_map"`
}

// pingcountObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadPingcountObjects or ebpf.CollectionSpec.LoadAndAssign.
type pingcountObjects struct {
	pingcountPrograms
	pingcountMaps
}

func (o *pingcountObjects) Close() error {
	return _PingcountClose(
		&o.pingcountPrograms,
		&o.pingcountMaps,
	)
}

// pingcountMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadPingcountObjects or ebpf.CollectionSpec.LoadAndAssign.
type pingcountMaps struct {
	CounterMap *ebpf.Map `ebpf:"counter_map"`
	OtherMap   *ebpf.Map `ebpf:"other_map"`
}

func (m *pingcountMaps) Close() error {
	return _PingcountClose(
		m.CounterMap,
		m.OtherMap,
	)
}

// pingcountPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadPingcountObjects or ebpf.CollectionSpec.LoadAndAssign.
type pingcountPrograms struct {
	XdpPingFunc *ebpf.Program `ebpf:"xdp_ping_func"`
}

func (p *pingcountPrograms) Close() error {
	return _PingcountClose(
		p.XdpPingFunc,
	)
}

func _PingcountClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//go:embed pingcount_bpfeb.o
var _PingcountBytes []byte
