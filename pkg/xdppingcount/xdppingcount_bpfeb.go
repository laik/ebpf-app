// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64
// +build arm64be armbe mips mips64 mips64p32 ppc64 s390 s390x sparc sparc64

package xdppingcount

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadXdppingcount returns the embedded CollectionSpec for xdppingcount.
func loadXdppingcount() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_XdppingcountBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load xdppingcount: %w", err)
	}

	return spec, err
}

// loadXdppingcountObjects loads xdppingcount and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//     *xdppingcountObjects
//     *xdppingcountPrograms
//     *xdppingcountMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadXdppingcountObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadXdppingcount()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// xdppingcountSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdppingcountSpecs struct {
	xdppingcountProgramSpecs
	xdppingcountMapSpecs
}

// xdppingcountSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdppingcountProgramSpecs struct {
	XpdPingCountFunc *ebpf.ProgramSpec `ebpf:"xpd_ping_count_func"`
}

// xdppingcountMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdppingcountMapSpecs struct {
	CounterMap *ebpf.MapSpec `ebpf:"counter_map"`
	OtherMap   *ebpf.MapSpec `ebpf:"other_map"`
}

// xdppingcountObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadXdppingcountObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdppingcountObjects struct {
	xdppingcountPrograms
	xdppingcountMaps
}

func (o *xdppingcountObjects) Close() error {
	return _XdppingcountClose(
		&o.xdppingcountPrograms,
		&o.xdppingcountMaps,
	)
}

// xdppingcountMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadXdppingcountObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdppingcountMaps struct {
	CounterMap *ebpf.Map `ebpf:"counter_map"`
	OtherMap   *ebpf.Map `ebpf:"other_map"`
}

func (m *xdppingcountMaps) Close() error {
	return _XdppingcountClose(
		m.CounterMap,
		m.OtherMap,
	)
}

// xdppingcountPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadXdppingcountObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdppingcountPrograms struct {
	XpdPingCountFunc *ebpf.Program `ebpf:"xpd_ping_count_func"`
}

func (p *xdppingcountPrograms) Close() error {
	return _XdppingcountClose(
		p.XpdPingCountFunc,
	)
}

func _XdppingcountClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//go:embed xdppingcount_bpfeb.o
var _XdppingcountBytes []byte
